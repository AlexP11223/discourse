name: CI

on: [push]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2-beta
      # - name: Bundler cache
      #   uses: actions/cache@v1
      #   id: bundler-cache
      #   with:
      #     path: vendor/bundle
      #     key: ${{ runner.os }}-${{ matrix.os }}-gem-${{ hashFiles('**/Gemfile.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-gem-
      - name: Setup ruby
        uses: actions/setup-ruby@v1
        with:
          ruby-version: '2.6.3'
          architecture: 'x64'  
      - name: Install gems
        run: gem install rubocop:0.69.0 rubocop-discourse 
      - name: Rubocop Linter
        run: ruby script/rubocop_github_action.rb

  build:
    name: ${{ matrix.build_types }}
    runs-on: ${{ matrix.os }}

    env:
      DISCOURSE_HOSTNAME: www.example.com
      RUBY_GLOBAL_METHOD_CACHE_SIZE: 131072
      BUILD_TYPE: ${{ matrix.build_types }}
      RAILS_ENV: test
      PGHOST: localhost
      PGUSER: discourse
      PGPASSWORD: discourse

    strategy:
      fail-fast: false

      matrix:
        build_types: [ 'BACKEND', 'FRONTEND', 'LINT']
        os: [ ubuntu-latest ]
        ruby: [ '2.6.3' ]
        postgres: [ '12' ]
        redis: [ '4.x' ]

    services:
      postgres:
        image: postgres:10
        ports: 
          - 5432:5432
        env:
          POSTGRES_USER: discourse
          POSTGRES_PASSWORD: discourse
          POSTGRES_DB: discourse_test
        options: >-
          --mount type=tmpfs,destination=/var/lib/postgresql/data
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@master
        with:
          fetch-depth: 1

      - name: Setup packages
        if: env.BUILD_TYPE != 'LINT'
        run: |
          sudo apt-get -yqq install postgresql-client libpq-dev gifsicle jpegoptim optipng jhead && \
          wget -qO- https://raw.githubusercontent.com/discourse/discourse_docker/master/image/base/install-pngquant | sudo sh

      - name: Setup redis
        uses: shogo82148/actions-setup-redis@v1
        if: env.BUILD_TYPE != 'LINT'
        with:
          redis-version: ${{ matrix.redis }}

      - name: Setup ruby
        uses: actions/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby }}
          architecture: 'x64'

      - name: Setup bundler
        run: gem install bundler -v 1.17.3 --no-doc

      - name: Bundler cache
        uses: actions/cache@v1
        id: bundler-cache
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gem-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gem-
      
      - name: Setup gems
        run: bundle install --without development --deployment --jobs 4 --retry 3

      - name: Get yarn cache directory
        id: yarn-cache-dir
        run: echo "::set-output name=dir::$(yarn cache dir)"
    
      - name: Yarn cache
        uses: actions/cache@v1
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-${{ matrix.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.os }}-yarn-

      - name: Yarn install
        run: yarn install --dev

      - name: Create database
        if: env.BUILD_TYPE != 'LINT'    
        run: bin/rake db:create && bin/rake db:migrate

      - name: Rubocop
        if: env.BUILD_TYPE == 'LINT'
        run: bundle exec rubocop .
        
      - name: Core RSpec
        if: env.BUILD_TYPE == 'BACKEND'
        run: bundle exec rspec

      - name: Plugin RSpec
        if: env.BUILD_TYPE == 'BACKEND'
        run: bin/rake plugin:spec

      - name: Core QUnit
        if: env.BUILD_TYPE == 'FRONTEND'
        run: bundle exec rake qunit:test['1200000']
      
      - name: Wizard QUnit
        if: env.BUILD_TYPE == 'FRONTEND'
        run: bundle exec rake qunit:test['1200000','/wizard/qunit']
          
      - name: Plugin QUnit
        if: env.BUILD_TYPE == 'FRONTEND'
        run: bundle exec rake plugin:qunit
        
